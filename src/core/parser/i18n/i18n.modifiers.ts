import type { NuxtPage } from '@nuxt/schema';
import { moduleOptionStore } from '$$/core/stores';

const specialCharacterRegxp = /([^a-zA-Z0-9_])/gm;

/** Will check if the is a route generated by @nuxtjs/i18n */
export function is18Sibling(path: string) {
  const { i18n, i18nOptions, i18nLocales } = moduleOptionStore;
  if (i18n && i18nOptions && i18nOptions?.strategy !== 'no_prefix') {
    if (i18nOptions?.strategy === 'prefix') {
      return false;
    }
    const i18LocalesRecognizer = i18nLocales
      ?.map((m) => m.replace(specialCharacterRegxp, '\\$&'))
      .join('|');

    return !!path?.match(new RegExp(`^/?(${i18LocalesRecognizer})(/.*)?$`, 'g'));
  }
  return false;
}

export function modifyRoutePrefixDefaultIfI18n(route: NuxtPage) {
  const { i18n, i18nOptions, i18nLocales } = moduleOptionStore;
  if (i18n && i18nOptions && route.name) {
    const separator = i18nOptions?.routesNameSeparator ?? '___';
    const i18LocalesRecognizer = i18nLocales
      ?.map((m) => m.replace(specialCharacterRegxp, '\\$&'))
      .join('|');
    if (i18nOptions?.strategy === 'prefix_and_default') {
      const routeDefaultRegXp = new RegExp(
        `([a-zA-Z0-9-]+)${separator}(${i18LocalesRecognizer})${separator}default`,
        'g'
      );
      const match = routeDefaultRegXp.exec(route.name);
      if (match) {
        const [_, routeName] = match;
        // route.name = routeName;
        return {
          ...route,
          name: routeName,
        };
      }
    } else if (i18nOptions?.strategy === 'prefix_except_default') {
      let defaultLocale = i18nLocales.find((f) => f === i18nOptions.defaultLocale)
        ? i18nOptions.defaultLocale?.replace(specialCharacterRegxp, '\\$&')
        : undefined;

      const routeDefaultNameRegXp = new RegExp(`^([a-zA-Z0-9-]+)${separator}${defaultLocale}`, 'g');
      const match = routeDefaultNameRegXp.exec(route.name);
      if (match) {
        const [_, routeName] = match;
        // route.name = routeName;
        return {
          ...route,
          name: routeName,
        };
      }
    } else if (i18nOptions?.strategy === 'prefix') {
      const routeName = modifyPrefixForLocaleRouteName(route.name);
      // route.name = routeName;
      return {
        ...route,
        name: routeName,
      };
    }
  }
  return route;
}

export function modifyPrefixForLocaleRouteName<T extends string>(routeName?: T): T {
  const { i18n, i18nOptions, i18nLocales } = moduleOptionStore;
  if (i18n && i18nOptions && routeName) {
    const separator = i18nOptions?.routesNameSeparator ?? '___';
    const i18LocalesRecognizer = i18nLocales
      ?.map((m) => m.replace(specialCharacterRegxp, '\\$&'))
      .join('|');

    const routeDefaultNameRegXp = new RegExp(
      `^([a-zA-Z0-9-]+)${separator}${i18LocalesRecognizer}`,
      'g'
    );
    const match = routeDefaultNameRegXp.exec(routeName);
    if (match) {
      const [_, _routeName] = match;
      return _routeName as T;
    }
    return routeName;
  }
  return routeName as T;
}
